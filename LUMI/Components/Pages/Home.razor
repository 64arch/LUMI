@page "/"
@using LUMI.DataAccess
@using LUMI.DataAccess.Movies
@rendermode InteractiveServer

<ToastComponent @ref="ToastComponent.toast" />

<title>LUMI - –ì–æ–ª–æ–≤–Ω–∞</title>

<header class="top-bar">
    <div class="search-bar">
        <input type="text" placeholder="–ü–æ—à—É–∫" @bind="searchQuery" @bind:after="OnSearchChanged" minlength="3">
        <i class="icon-search"></i>
    </div>
    <div class="user-actions">
        <div class="user-avatar" onclick="window.location='/admin'">
        </div>
    </div>
</header>
<section class="featured-content"
         style="background-image: url('@futuredMovie.LargePoster');">
    <div class="featured-info">
        <div class="featured-tags">
            <span class="tag" style="background-color: var(--primary-color); color: var(--bg-color)">
                –ù–æ–≤–∏–Ω–∫–∞ –Ω–∞ —Å–∞–π—Ç—ñ
            </span>
            @if (futuredMovie.Tags?.Count != 0 && futuredMovie.Tags != null) {
                @foreach (var tag in futuredMovie.Tags) {
                    <span class="tag">@tag.Trim()</span>
                }
            }
        </div>
        <h1 class="featured-title">
            @futuredMovie.Title
        </h1>
        <p class="featured-description">
            @futuredMovie.Description
        </p>
        <div class="featured-actions">
            <div class="featured-actions">
                <button onclick="window.location.href = '/movie/@futuredMovie.ID'"
                        class="btn btn-icon">
                    <span style="text-shadow: #1a1a1a 0px 0px 1px;">üé¨</span> –î–∏–≤–∏—Ç–∏—Å—å
                </button>
            </div>
        </div>
    </div>
</section>
<section class="recommended">
    <h2>–§—ñ–ª—å–º–∏</h2>
    <div class="featured-actions">
        <button @onclick="() => SortMoviesBy(SortMovieTypes.All)" class="btn btn-secondary">–í—Å—ñ</button>
        <button @onclick="() => SortMoviesBy(SortMovieTypes.Drama)" class="btn btn-secondary">–î—Ä–∞–º–∞</button>
        <button @onclick="() => SortMoviesBy(SortMovieTypes.Animation)" class="btn btn-secondary">–ê–Ω—ñ–º–∞—Ü—ñ—è</button>
        <button @onclick="() => SortMoviesBy(SortMovieTypes.Horror)" class="btn btn-secondary">–ñ–∞—Ö–∏</button>
        <button @onclick="() => SortMoviesBy(SortMovieTypes.Adventure)" class="btn btn-secondary">–ü—Ä–∏–≥–æ–¥–∏</button>
        <button @onclick="() => SortMoviesBy(SortMovieTypes.Crime)" class="btn btn-secondary">–ó–ª–æ—á–∏–Ω</button>
        <button @onclick="() => SortMoviesBy(SortMovieTypes.Thriller)" class="btn btn-secondary">–¢—Ä–∏–ª–µ—Ä</button>
    </div>
    <div class="movie-grid" style="margin-top: 20px">
        @if (movies.Count != 0) {
            @foreach (var movie in movies) {
                <div class="movie-card">
                    <div class="movie-thumbnail" onclick="window.location = '/movie/@movie.ID'"
                         style="background-image: url('@movie.Poster');"></div>
                    <div class="movie-info">
                        <div class="movie-tags">
                            <span class="tag">@movie.Tags.FirstOrDefault().Trim()</span>
                        </div>
                    </div>
                    <h3 class="movie-title">@movie.Title</h3>
                </div>
            }   
        }
        else {
            <h3 style="color: var(--hover-color);">–§—ñ–ª—å–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h3>
        }
    </div>
</section>


@code {

    enum SortMovieTypes {
        All,
        Drama,
        Animation,
        Horror,
        Adventure,
        Crime,
        Thriller
    }
    
    private static List<LUMI.Models.Movie?> cachedMovies = new ();
    public static List<LUMI.Models.Movie?> movies = new ();
    LUMI.Models.Movie? futuredMovie = new();
    private string searchQuery = string.Empty;
    
    //fix object = null after start host. its look like empty movies list.
    
    protected override async Task OnInitializedAsync() {
        try {
            cachedMovies = await MoviesDBContext.GetMoviesAsync();
            futuredMovie = cachedMovies.LastOrDefault();
            movies = cachedMovies;
        }
        catch (Exception e) {
            Console.WriteLine(e.Message);
        }
    }
    
    private void OnSearchChanged() {
        if (searchQuery.Length >= 3 && !string.IsNullOrWhiteSpace(searchQuery)) {
            PerformSearch();
        } else {
            ToastComponent.toast.ShowToast("Error: Minimum length 3","error");
            movies = cachedMovies;
        }
    }

    private void PerformSearch() {
        movies = cachedMovies
            .Where(movie => movie.Title.ToLower().Contains(searchQuery.ToLower()))
            .ToList();
    }

    private void SortMoviesBy(SortMovieTypes type) {
        var tagMap = new Dictionary<SortMovieTypes, string> {
            { SortMovieTypes.Drama, "–î—Ä–∞–º–∞" },
            { SortMovieTypes.Animation, "–ê–Ω—ñ–º–∞—Ü—ñ—è" },
            { SortMovieTypes.Horror, "–ñ–∞—Ö–∏" },
            { SortMovieTypes.Adventure, "–ü—Ä–∏–≥–æ–¥–∏" },
            { SortMovieTypes.Crime, "–ó–ª–æ—á–∏–Ω" },
            { SortMovieTypes.Thriller, "–¢—Ä–∏–ª–µ—Ä" }
        };
        
        if (type == SortMovieTypes.All) {
            movies = cachedMovies;
        }
        else if (tagMap.ContainsKey(type)) {
            movies = cachedMovies.Where(movie => movie.Tags.Any(tag => tag == tagMap[type])).ToList();
        }
    }
}
